// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SteamData.Models
{
    public partial class SteamDatabaseContext : DbContext
    {
        public SteamDatabaseContext()
        {
        }

        public SteamDatabaseContext(DbContextOptions<SteamDatabaseContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accounts> Accounts { get; set; }
        public virtual DbSet<Companies> Companies { get; set; }
        public virtual DbSet<Countries> Countries { get; set; }
        public virtual DbSet<Devs> Devs { get; set; }
        public virtual DbSet<Games> Games { get; set; }
        public virtual DbSet<Servers> Servers { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Accounts>(entity =>
            {
                entity.HasKey(e => e.EmailId);

                entity.HasIndex(e => e.CountryId, "IX_Accounts_CountryId");

                entity.HasIndex(e => e.UserId, "IX_Accounts_UserId")
                    .IsUnique();

                entity.Property(e => e.Email).IsRequired();

                entity.Property(e => e.Password).IsRequired();

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.CountryId);

                entity.HasOne(d => d.User)
                    .WithOne(p => p.Accounts)
                    .HasForeignKey<Accounts>(d => d.UserId);
            });

            modelBuilder.Entity<Companies>(entity =>
            {
                entity.HasKey(e => e.CompanyId);

                entity.Property(e => e.CompanyName).IsRequired();

                entity.HasMany(d => d.CountriesCountry)
                    .WithMany(p => p.CompaniesCompany)
                    .UsingEntity<Dictionary<string, object>>(
                        "CompanyCountry",
                        l => l.HasOne<Countries>().WithMany().HasForeignKey("CountriesCountryId"),
                        r => r.HasOne<Companies>().WithMany().HasForeignKey("CompaniesCompanyId"),
                        j =>
                        {
                            j.HasKey("CompaniesCompanyId", "CountriesCountryId");

                            j.ToTable("CompanyCountry");

                            j.HasIndex(new[] { "CompaniesCompanyId" }, "IX_CompanyCountry_CompaniesCompanyId");

                            j.HasIndex(new[] { "CountriesCountryId" }, "IX_CompanyCountry_CountriesCountryId");
                        });
            });

            modelBuilder.Entity<Countries>(entity =>
            {
                entity.HasKey(e => e.CountryId);

                entity.Property(e => e.CountryName).IsRequired();
            });

            modelBuilder.Entity<Devs>(entity =>
            {
                entity.HasKey(e => e.DevId);

                entity.HasIndex(e => e.CompanyId, "IX_Devs_CompanyId");

                entity.HasIndex(e => e.CountryId, "IX_Devs_CountryId");

                entity.Property(e => e.FirstName).IsRequired();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Devs)
                    .HasForeignKey(d => d.CompanyId);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Devs)
                    .HasForeignKey(d => d.CountryId);

                entity.HasMany(d => d.GamesGame)
                    .WithMany(p => p.DevelopersDev)
                    .UsingEntity<Dictionary<string, object>>(
                        "DeveloperGame",
                        l => l.HasOne<Games>().WithMany().HasForeignKey("GamesGameId").OnDelete(DeleteBehavior.ClientSetNull),
                        r => r.HasOne<Devs>().WithMany().HasForeignKey("DevelopersDevId"),
                        j =>
                        {
                            j.HasKey("DevelopersDevId", "GamesGameId");

                            j.ToTable("DeveloperGame");

                            j.HasIndex(new[] { "DevelopersDevId" }, "IX_DeveloperGame_DevelopersDevId");

                            j.HasIndex(new[] { "GamesGameId" }, "IX_DeveloperGame_GamesGameId");
                        });
            });

            modelBuilder.Entity<Games>(entity =>
            {
                entity.HasKey(e => e.GameId);

                entity.HasIndex(e => e.CompanyId, "IX_Games_CompanyId");

                entity.Property(e => e.Gender).IsRequired();

                entity.Property(e => e.Title).IsRequired();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Games)
                    .HasForeignKey(d => d.CompanyId);

                entity.HasMany(d => d.UsersUser)
                    .WithMany(p => p.GamesGame)
                    .UsingEntity<Dictionary<string, object>>(
                        "GameUser",
                        l => l.HasOne<Users>().WithMany().HasForeignKey("UsersUserId"),
                        r => r.HasOne<Games>().WithMany().HasForeignKey("GamesGameId"),
                        j =>
                        {
                            j.HasKey("GamesGameId", "UsersUserId");

                            j.ToTable("GameUser");

                            j.HasIndex(new[] { "GamesGameId" }, "IX_GameUser_GamesGameId");

                            j.HasIndex(new[] { "UsersUserId" }, "IX_GameUser_UsersUserId");
                        });
            });

            modelBuilder.Entity<Servers>(entity =>
            {
                entity.HasKey(e => e.ServerId);

                entity.HasIndex(e => e.CompanyId, "IX_Servers_CompanyId");

                entity.HasIndex(e => e.CountryId, "IX_Servers_CountryId");

                entity.HasIndex(e => e.GameId, "IX_Servers_GameId");

                entity.Property(e => e.ServerName).IsRequired();

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Servers)
                    .HasForeignKey(d => d.CompanyId);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Servers)
                    .HasForeignKey(d => d.CountryId);

                entity.HasOne(d => d.Game)
                    .WithMany(p => p.Servers)
                    .HasForeignKey(d => d.GameId);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.Property(e => e.Nickname).IsRequired();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}